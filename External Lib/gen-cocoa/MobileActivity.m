/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "MobileActivity.h"

@implementation Actor

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id role: (NSString *) role name: (NSString *) name
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __role = [role retain_stub];
  __role_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"role"])
  {
    __role = [[decoder decodeObjectForKey: @"role"] retain_stub];
    __role_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__role_isset)
  {
    [encoder encodeObject: __role forKey: @"role"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__role release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) role {
  return [[__role retain_stub] autorelease_stub];
}

- (void) setRole: (NSString *) role {
  [role retain_stub];
  [__role release_stub];
  __role = role;
  __role_isset = YES;
}

- (BOOL) roleIsSet {
  return __role_isset;
}

- (void) unsetRole {
  [__role release_stub];
  __role = nil;
  __role_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Actor"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__role_isset) {
    if (__role != nil) {
      [outProtocol writeFieldBeginWithName: @"role" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __role];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Actor("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",role:"];
  [ms appendFormat: @"\"%@\"", __role];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivityObject

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id idFieldName: (NSString *) idFieldName parentId: (NSString *) parentId sentiment: (NSString *) sentiment
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __idFieldName = [idFieldName retain_stub];
  __idFieldName_isset = YES;
  __parentId = [parentId retain_stub];
  __parentId_isset = YES;
  __sentiment = [sentiment retain_stub];
  __sentiment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"idFieldName"])
  {
    __idFieldName = [[decoder decodeObjectForKey: @"idFieldName"] retain_stub];
    __idFieldName_isset = YES;
  }
  if ([decoder containsValueForKey: @"parentId"])
  {
    __parentId = [[decoder decodeObjectForKey: @"parentId"] retain_stub];
    __parentId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sentiment"])
  {
    __sentiment = [[decoder decodeObjectForKey: @"sentiment"] retain_stub];
    __sentiment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__idFieldName_isset)
  {
    [encoder encodeObject: __idFieldName forKey: @"idFieldName"];
  }
  if (__parentId_isset)
  {
    [encoder encodeObject: __parentId forKey: @"parentId"];
  }
  if (__sentiment_isset)
  {
    [encoder encodeObject: __sentiment forKey: @"sentiment"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__idFieldName release_stub];
  [__parentId release_stub];
  [__sentiment release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) idFieldName {
  return [[__idFieldName retain_stub] autorelease_stub];
}

- (void) setIdFieldName: (NSString *) idFieldName {
  [idFieldName retain_stub];
  [__idFieldName release_stub];
  __idFieldName = idFieldName;
  __idFieldName_isset = YES;
}

- (BOOL) idFieldNameIsSet {
  return __idFieldName_isset;
}

- (void) unsetIdFieldName {
  [__idFieldName release_stub];
  __idFieldName = nil;
  __idFieldName_isset = NO;
}

- (NSString *) parentId {
  return [[__parentId retain_stub] autorelease_stub];
}

- (void) setParentId: (NSString *) parentId {
  [parentId retain_stub];
  [__parentId release_stub];
  __parentId = parentId;
  __parentId_isset = YES;
}

- (BOOL) parentIdIsSet {
  return __parentId_isset;
}

- (void) unsetParentId {
  [__parentId release_stub];
  __parentId = nil;
  __parentId_isset = NO;
}

- (NSString *) sentiment {
  return [[__sentiment retain_stub] autorelease_stub];
}

- (void) setSentiment: (NSString *) sentiment {
  [sentiment retain_stub];
  [__sentiment release_stub];
  __sentiment = sentiment;
  __sentiment_isset = YES;
}

- (BOOL) sentimentIsSet {
  return __sentiment_isset;
}

- (void) unsetSentiment {
  [__sentiment release_stub];
  __sentiment = nil;
  __sentiment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdFieldName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setParentId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSentiment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivityObject"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idFieldName_isset) {
    if (__idFieldName != nil) {
      [outProtocol writeFieldBeginWithName: @"idFieldName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __idFieldName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__parentId_isset) {
    if (__parentId != nil) {
      [outProtocol writeFieldBeginWithName: @"parentId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __parentId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sentiment_isset) {
    if (__sentiment != nil) {
      [outProtocol writeFieldBeginWithName: @"sentiment" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __sentiment];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivityObject("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",idFieldName:"];
  [ms appendFormat: @"\"%@\"", __idFieldName];
  [ms appendString: @",parentId:"];
  [ms appendFormat: @"\"%@\"", __parentId];
  [ms appendString: @",sentiment:"];
  [ms appendFormat: @"\"%@\"", __sentiment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivitySource

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSourceId: (NSString *) sourceId type: (NSString *) type sourceName: (NSString *) sourceName
{
  self = [super init];
  __sourceId = [sourceId retain_stub];
  __sourceId_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __sourceName = [sourceName retain_stub];
  __sourceName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sourceId"])
  {
    __sourceId = [[decoder decodeObjectForKey: @"sourceId"] retain_stub];
    __sourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceName"])
  {
    __sourceName = [[decoder decodeObjectForKey: @"sourceName"] retain_stub];
    __sourceName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sourceId_isset)
  {
    [encoder encodeObject: __sourceId forKey: @"sourceId"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__sourceName_isset)
  {
    [encoder encodeObject: __sourceName forKey: @"sourceName"];
  }
}

- (void) dealloc
{
  [__sourceId release_stub];
  [__type release_stub];
  [__sourceName release_stub];
  [super dealloc_stub];
}

- (NSString *) sourceId {
  return [[__sourceId retain_stub] autorelease_stub];
}

- (void) setSourceId: (NSString *) sourceId {
  [sourceId retain_stub];
  [__sourceId release_stub];
  __sourceId = sourceId;
  __sourceId_isset = YES;
}

- (BOOL) sourceIdIsSet {
  return __sourceId_isset;
}

- (void) unsetSourceId {
  [__sourceId release_stub];
  __sourceId = nil;
  __sourceId_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) sourceName {
  return [[__sourceName retain_stub] autorelease_stub];
}

- (void) setSourceName: (NSString *) sourceName {
  [sourceName retain_stub];
  [__sourceName release_stub];
  __sourceName = sourceName;
  __sourceName_isset = YES;
}

- (BOOL) sourceNameIsSet {
  return __sourceName_isset;
}

- (void) unsetSourceName {
  [__sourceName release_stub];
  __sourceName = nil;
  __sourceName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivitySource"];
  if (__sourceId_isset) {
    if (__sourceId != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sourceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceName_isset) {
    if (__sourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sourceName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivitySource("];
  [ms appendString: @"sourceId:"];
  [ms appendFormat: @"\"%@\"", __sourceId];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",sourceName:"];
  [ms appendFormat: @"\"%@\"", __sourceName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Target

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id type: (NSString *) type name: (NSString *) name
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__type release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Target"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Target("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Activity

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTenantId: (int64_t) tenantId locationId: (NSString *) locationId verb: (NSString *) verb type: (NSString *) type published: (int64_t) published actor: (Actor *) actor object: (ActivityObject *) object source: (ActivitySource *) source target: (Target *) target activityString: (NSString *) activityString
{
  self = [super init];
  __tenantId = tenantId;
  __tenantId_isset = YES;
  __locationId = [locationId retain_stub];
  __locationId_isset = YES;
  __verb = [verb retain_stub];
  __verb_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __published = published;
  __published_isset = YES;
  __actor = [actor retain_stub];
  __actor_isset = YES;
  __object = [object retain_stub];
  __object_isset = YES;
  __source = [source retain_stub];
  __source_isset = YES;
  __target = [target retain_stub];
  __target_isset = YES;
  __activityString = [activityString retain_stub];
  __activityString_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tenantId"])
  {
    __tenantId = [decoder decodeInt64ForKey: @"tenantId"];
    __tenantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationId"])
  {
    __locationId = [[decoder decodeObjectForKey: @"locationId"] retain_stub];
    __locationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"verb"])
  {
    __verb = [[decoder decodeObjectForKey: @"verb"] retain_stub];
    __verb_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"published"])
  {
    __published = [decoder decodeInt64ForKey: @"published"];
    __published_isset = YES;
  }
  if ([decoder containsValueForKey: @"actor"])
  {
    __actor = [[decoder decodeObjectForKey: @"actor"] retain_stub];
    __actor_isset = YES;
  }
  if ([decoder containsValueForKey: @"object"])
  {
    __object = [[decoder decodeObjectForKey: @"object"] retain_stub];
    __object_isset = YES;
  }
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"target"])
  {
    __target = [[decoder decodeObjectForKey: @"target"] retain_stub];
    __target_isset = YES;
  }
  if ([decoder containsValueForKey: @"activityString"])
  {
    __activityString = [[decoder decodeObjectForKey: @"activityString"] retain_stub];
    __activityString_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tenantId_isset)
  {
    [encoder encodeInt64: __tenantId forKey: @"tenantId"];
  }
  if (__locationId_isset)
  {
    [encoder encodeObject: __locationId forKey: @"locationId"];
  }
  if (__verb_isset)
  {
    [encoder encodeObject: __verb forKey: @"verb"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__published_isset)
  {
    [encoder encodeInt64: __published forKey: @"published"];
  }
  if (__actor_isset)
  {
    [encoder encodeObject: __actor forKey: @"actor"];
  }
  if (__object_isset)
  {
    [encoder encodeObject: __object forKey: @"object"];
  }
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__target_isset)
  {
    [encoder encodeObject: __target forKey: @"target"];
  }
  if (__activityString_isset)
  {
    [encoder encodeObject: __activityString forKey: @"activityString"];
  }
}

- (void) dealloc
{
  [__locationId release_stub];
  [__verb release_stub];
  [__type release_stub];
  [__actor release_stub];
  [__object release_stub];
  [__source release_stub];
  [__target release_stub];
  [__activityString release_stub];
  [super dealloc_stub];
}

- (int64_t) tenantId {
  return __tenantId;
}

- (void) setTenantId: (int64_t) tenantId {
  __tenantId = tenantId;
  __tenantId_isset = YES;
}

- (BOOL) tenantIdIsSet {
  return __tenantId_isset;
}

- (void) unsetTenantId {
  __tenantId_isset = NO;
}

- (NSString *) locationId {
  return [[__locationId retain_stub] autorelease_stub];
}

- (void) setLocationId: (NSString *) locationId {
  [locationId retain_stub];
  [__locationId release_stub];
  __locationId = locationId;
  __locationId_isset = YES;
}

- (BOOL) locationIdIsSet {
  return __locationId_isset;
}

- (void) unsetLocationId {
  [__locationId release_stub];
  __locationId = nil;
  __locationId_isset = NO;
}

- (NSString *) verb {
  return [[__verb retain_stub] autorelease_stub];
}

- (void) setVerb: (NSString *) verb {
  [verb retain_stub];
  [__verb release_stub];
  __verb = verb;
  __verb_isset = YES;
}

- (BOOL) verbIsSet {
  return __verb_isset;
}

- (void) unsetVerb {
  [__verb release_stub];
  __verb = nil;
  __verb_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (int64_t) published {
  return __published;
}

- (void) setPublished: (int64_t) published {
  __published = published;
  __published_isset = YES;
}

- (BOOL) publishedIsSet {
  return __published_isset;
}

- (void) unsetPublished {
  __published_isset = NO;
}

- (Actor *) actor {
  return [[__actor retain_stub] autorelease_stub];
}

- (void) setActor: (Actor *) actor {
  [actor retain_stub];
  [__actor release_stub];
  __actor = actor;
  __actor_isset = YES;
}

- (BOOL) actorIsSet {
  return __actor_isset;
}

- (void) unsetActor {
  [__actor release_stub];
  __actor = nil;
  __actor_isset = NO;
}

- (ActivityObject *) object {
  return [[__object retain_stub] autorelease_stub];
}

- (void) setObject: (ActivityObject *) object {
  [object retain_stub];
  [__object release_stub];
  __object = object;
  __object_isset = YES;
}

- (BOOL) objectIsSet {
  return __object_isset;
}

- (void) unsetObject {
  [__object release_stub];
  __object = nil;
  __object_isset = NO;
}

- (ActivitySource *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (ActivitySource *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (Target *) target {
  return [[__target retain_stub] autorelease_stub];
}

- (void) setTarget: (Target *) target {
  [target retain_stub];
  [__target release_stub];
  __target = target;
  __target_isset = YES;
}

- (BOOL) targetIsSet {
  return __target_isset;
}

- (void) unsetTarget {
  [__target release_stub];
  __target = nil;
  __target_isset = NO;
}

- (NSString *) activityString {
  return [[__activityString retain_stub] autorelease_stub];
}

- (void) setActivityString: (NSString *) activityString {
  [activityString retain_stub];
  [__activityString release_stub];
  __activityString = activityString;
  __activityString_isset = YES;
}

- (BOOL) activityStringIsSet {
  return __activityString_isset;
}

- (void) unsetActivityString {
  [__activityString release_stub];
  __activityString = nil;
  __activityString_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTenantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVerb: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPublished: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Actor *fieldValue = [[Actor alloc] init];
          [fieldValue read: inProtocol];
          [self setActor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          ActivityObject *fieldValue = [[ActivityObject alloc] init];
          [fieldValue read: inProtocol];
          [self setObject: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          ActivitySource *fieldValue = [[ActivitySource alloc] init];
          [fieldValue read: inProtocol];
          [self setSource: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          Target *fieldValue = [[Target alloc] init];
          [fieldValue read: inProtocol];
          [self setTarget: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivityString: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Activity"];
  if (__tenantId_isset) {
    [outProtocol writeFieldBeginWithName: @"tenantId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __tenantId];
    [outProtocol writeFieldEnd];
  }
  if (__locationId_isset) {
    if (__locationId != nil) {
      [outProtocol writeFieldBeginWithName: @"locationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __locationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__verb_isset) {
    if (__verb != nil) {
      [outProtocol writeFieldBeginWithName: @"verb" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __verb];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__published_isset) {
    [outProtocol writeFieldBeginWithName: @"published" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __published];
    [outProtocol writeFieldEnd];
  }
  if (__actor_isset) {
    if (__actor != nil) {
      [outProtocol writeFieldBeginWithName: @"actor" type: TType_STRUCT fieldID: 6];
      [__actor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__object_isset) {
    if (__object != nil) {
      [outProtocol writeFieldBeginWithName: @"object" type: TType_STRUCT fieldID: 7];
      [__object write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRUCT fieldID: 8];
      [__source write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__target_isset) {
    if (__target != nil) {
      [outProtocol writeFieldBeginWithName: @"target" type: TType_STRUCT fieldID: 9];
      [__target write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activityString_isset) {
    if (__activityString != nil) {
      [outProtocol writeFieldBeginWithName: @"activityString" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __activityString];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Activity("];
  [ms appendString: @"tenantId:"];
  [ms appendFormat: @"%qi", __tenantId];
  [ms appendString: @",locationId:"];
  [ms appendFormat: @"\"%@\"", __locationId];
  [ms appendString: @",verb:"];
  [ms appendFormat: @"\"%@\"", __verb];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",published:"];
  [ms appendFormat: @"%qi", __published];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", __actor];
  [ms appendString: @",object:"];
  [ms appendFormat: @"%@", __object];
  [ms appendString: @",source:"];
  [ms appendFormat: @"%@", __source];
  [ms appendString: @",target:"];
  [ms appendFormat: @"%@", __target];
  [ms appendString: @",activityString:"];
  [ms appendFormat: @"\"%@\"", __activityString];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivityPeriod

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimePeriod: (int) timePeriod activities: (NSMutableArray *) activities
{
  self = [super init];
  __timePeriod = timePeriod;
  __timePeriod_isset = YES;
  __activities = [activities retain_stub];
  __activities_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timePeriod"])
  {
    __timePeriod = [decoder decodeIntForKey: @"timePeriod"];
    __timePeriod_isset = YES;
  }
  if ([decoder containsValueForKey: @"activities"])
  {
    __activities = [[decoder decodeObjectForKey: @"activities"] retain_stub];
    __activities_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timePeriod_isset)
  {
    [encoder encodeInt: __timePeriod forKey: @"timePeriod"];
  }
  if (__activities_isset)
  {
    [encoder encodeObject: __activities forKey: @"activities"];
  }
}

- (void) dealloc
{
  [__activities release_stub];
  [super dealloc_stub];
}

- (int) timePeriod {
  return __timePeriod;
}

- (void) setTimePeriod: (int) timePeriod {
  __timePeriod = timePeriod;
  __timePeriod_isset = YES;
}

- (BOOL) timePeriodIsSet {
  return __timePeriod_isset;
}

- (void) unsetTimePeriod {
  __timePeriod_isset = NO;
}

- (NSMutableArray *) activities {
  return [[__activities retain_stub] autorelease_stub];
}

- (void) setActivities: (NSMutableArray *) activities {
  [activities retain_stub];
  [__activities release_stub];
  __activities = activities;
  __activities_isset = YES;
}

- (BOOL) activitiesIsSet {
  return __activities_isset;
}

- (void) unsetActivities {
  [__activities release_stub];
  __activities = nil;
  __activities_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTimePeriod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Activity *_elem2 = [[Activity alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setActivities: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivityPeriod"];
  if (__timePeriod_isset) {
    [outProtocol writeFieldBeginWithName: @"timePeriod" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __timePeriod];
    [outProtocol writeFieldEnd];
  }
  if (__activities_isset) {
    if (__activities != nil) {
      [outProtocol writeFieldBeginWithName: @"activities" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__activities count]];
        int i4;
        for (i4 = 0; i4 < [__activities count]; i4++)
        {
          [[__activities objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivityPeriod("];
  [ms appendString: @"timePeriod:"];
  [ms appendFormat: @"%i", __timePeriod];
  [ms appendString: @",activities:"];
  [ms appendFormat: @"%@", __activities];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation MobileActivityConstants
+ (void) initialize {
}
@end

