/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "MobileCommon.h"

#import "MobileListing.h"

@implementation TimeRange

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOpenHour: (int32_t) openHour openMinutes: (int32_t) openMinutes closeHour: (int32_t) closeHour closeMinutes: (int32_t) closeMinutes
{
  self = [super init];
  __openHour = openHour;
  __openHour_isset = YES;
  __openMinutes = openMinutes;
  __openMinutes_isset = YES;
  __closeHour = closeHour;
  __closeHour_isset = YES;
  __closeMinutes = closeMinutes;
  __closeMinutes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"openHour"])
  {
    __openHour = [decoder decodeInt32ForKey: @"openHour"];
    __openHour_isset = YES;
  }
  if ([decoder containsValueForKey: @"openMinutes"])
  {
    __openMinutes = [decoder decodeInt32ForKey: @"openMinutes"];
    __openMinutes_isset = YES;
  }
  if ([decoder containsValueForKey: @"closeHour"])
  {
    __closeHour = [decoder decodeInt32ForKey: @"closeHour"];
    __closeHour_isset = YES;
  }
  if ([decoder containsValueForKey: @"closeMinutes"])
  {
    __closeMinutes = [decoder decodeInt32ForKey: @"closeMinutes"];
    __closeMinutes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__openHour_isset)
  {
    [encoder encodeInt32: __openHour forKey: @"openHour"];
  }
  if (__openMinutes_isset)
  {
    [encoder encodeInt32: __openMinutes forKey: @"openMinutes"];
  }
  if (__closeHour_isset)
  {
    [encoder encodeInt32: __closeHour forKey: @"closeHour"];
  }
  if (__closeMinutes_isset)
  {
    [encoder encodeInt32: __closeMinutes forKey: @"closeMinutes"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) openHour {
  return __openHour;
}

- (void) setOpenHour: (int32_t) openHour {
  __openHour = openHour;
  __openHour_isset = YES;
}

- (BOOL) openHourIsSet {
  return __openHour_isset;
}

- (void) unsetOpenHour {
  __openHour_isset = NO;
}

- (int32_t) openMinutes {
  return __openMinutes;
}

- (void) setOpenMinutes: (int32_t) openMinutes {
  __openMinutes = openMinutes;
  __openMinutes_isset = YES;
}

- (BOOL) openMinutesIsSet {
  return __openMinutes_isset;
}

- (void) unsetOpenMinutes {
  __openMinutes_isset = NO;
}

- (int32_t) closeHour {
  return __closeHour;
}

- (void) setCloseHour: (int32_t) closeHour {
  __closeHour = closeHour;
  __closeHour_isset = YES;
}

- (BOOL) closeHourIsSet {
  return __closeHour_isset;
}

- (void) unsetCloseHour {
  __closeHour_isset = NO;
}

- (int32_t) closeMinutes {
  return __closeMinutes;
}

- (void) setCloseMinutes: (int32_t) closeMinutes {
  __closeMinutes = closeMinutes;
  __closeMinutes_isset = YES;
}

- (BOOL) closeMinutesIsSet {
  return __closeMinutes_isset;
}

- (void) unsetCloseMinutes {
  __closeMinutes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpenHour: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpenMinutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCloseHour: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCloseMinutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimeRange"];
  if (__openHour_isset) {
    [outProtocol writeFieldBeginWithName: @"openHour" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __openHour];
    [outProtocol writeFieldEnd];
  }
  if (__openMinutes_isset) {
    [outProtocol writeFieldBeginWithName: @"openMinutes" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __openMinutes];
    [outProtocol writeFieldEnd];
  }
  if (__closeHour_isset) {
    [outProtocol writeFieldBeginWithName: @"closeHour" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __closeHour];
    [outProtocol writeFieldEnd];
  }
  if (__closeMinutes_isset) {
    [outProtocol writeFieldBeginWithName: @"closeMinutes" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __closeMinutes];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimeRange("];
  [ms appendString: @"openHour:"];
  [ms appendFormat: @"%i", __openHour];
  [ms appendString: @",openMinutes:"];
  [ms appendFormat: @"%i", __openMinutes];
  [ms appendString: @",closeHour:"];
  [ms appendFormat: @"%i", __closeHour];
  [ms appendString: @",closeMinutes:"];
  [ms appendFormat: @"%i", __closeMinutes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DailyHours

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDay: (int) day timeRanges: (NSMutableArray *) timeRanges closed: (BOOL) closed
{
  self = [super init];
  __day = day;
  __day_isset = YES;
  __timeRanges = [timeRanges retain_stub];
  __timeRanges_isset = YES;
  __closed = closed;
  __closed_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"day"])
  {
    __day = [decoder decodeIntForKey: @"day"];
    __day_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeRanges"])
  {
    __timeRanges = [[decoder decodeObjectForKey: @"timeRanges"] retain_stub];
    __timeRanges_isset = YES;
  }
  if ([decoder containsValueForKey: @"closed"])
  {
    __closed = [decoder decodeBoolForKey: @"closed"];
    __closed_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__day_isset)
  {
    [encoder encodeInt: __day forKey: @"day"];
  }
  if (__timeRanges_isset)
  {
    [encoder encodeObject: __timeRanges forKey: @"timeRanges"];
  }
  if (__closed_isset)
  {
    [encoder encodeBool: __closed forKey: @"closed"];
  }
}

- (void) dealloc
{
  [__timeRanges release_stub];
  [super dealloc_stub];
}

- (int) day {
  return __day;
}

- (void) setDay: (int) day {
  __day = day;
  __day_isset = YES;
}

- (BOOL) dayIsSet {
  return __day_isset;
}

- (void) unsetDay {
  __day_isset = NO;
}

- (NSMutableArray *) timeRanges {
  return [[__timeRanges retain_stub] autorelease_stub];
}

- (void) setTimeRanges: (NSMutableArray *) timeRanges {
  [timeRanges retain_stub];
  [__timeRanges release_stub];
  __timeRanges = timeRanges;
  __timeRanges_isset = YES;
}

- (BOOL) timeRangesIsSet {
  return __timeRanges_isset;
}

- (void) unsetTimeRanges {
  [__timeRanges release_stub];
  __timeRanges = nil;
  __timeRanges_isset = NO;
}

- (BOOL) closed {
  return __closed;
}

- (void) setClosed: (BOOL) closed {
  __closed = closed;
  __closed_isset = YES;
}

- (BOOL) closedIsSet {
  return __closed_isset;
}

- (void) unsetClosed {
  __closed_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TimeRange *_elem2 = [[TimeRange alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setTimeRanges: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setClosed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyHours"];
  if (__day_isset) {
    [outProtocol writeFieldBeginWithName: @"day" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __day];
    [outProtocol writeFieldEnd];
  }
  if (__timeRanges_isset) {
    if (__timeRanges != nil) {
      [outProtocol writeFieldBeginWithName: @"timeRanges" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__timeRanges count]];
        int i4;
        for (i4 = 0; i4 < [__timeRanges count]; i4++)
        {
          [[__timeRanges objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__closed_isset) {
    [outProtocol writeFieldBeginWithName: @"closed" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __closed];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DailyHours("];
  [ms appendString: @"day:"];
  [ms appendFormat: @"%i", __day];
  [ms appendString: @",timeRanges:"];
  [ms appendFormat: @"%@", __timeRanges];
  [ms appendString: @",closed:"];
  [ms appendFormat: @"%i", __closed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BusinessHours

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDailyHours: (NSMutableArray *) dailyHours primary: (BOOL) primary type: (NSString *) type
{
  self = [super init];
  __dailyHours = [dailyHours retain_stub];
  __dailyHours_isset = YES;
  __primary = primary;
  __primary_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dailyHours"])
  {
    __dailyHours = [[decoder decodeObjectForKey: @"dailyHours"] retain_stub];
    __dailyHours_isset = YES;
  }
  if ([decoder containsValueForKey: @"primary"])
  {
    __primary = [decoder decodeBoolForKey: @"primary"];
    __primary_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dailyHours_isset)
  {
    [encoder encodeObject: __dailyHours forKey: @"dailyHours"];
  }
  if (__primary_isset)
  {
    [encoder encodeBool: __primary forKey: @"primary"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
}

- (void) dealloc
{
  [__dailyHours release_stub];
  [__type release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) dailyHours {
  return [[__dailyHours retain_stub] autorelease_stub];
}

- (void) setDailyHours: (NSMutableArray *) dailyHours {
  [dailyHours retain_stub];
  [__dailyHours release_stub];
  __dailyHours = dailyHours;
  __dailyHours_isset = YES;
}

- (BOOL) dailyHoursIsSet {
  return __dailyHours_isset;
}

- (void) unsetDailyHours {
  [__dailyHours release_stub];
  __dailyHours = nil;
  __dailyHours_isset = NO;
}

- (BOOL) primary {
  return __primary;
}

- (void) setPrimary: (BOOL) primary {
  __primary = primary;
  __primary_isset = YES;
}

- (BOOL) primaryIsSet {
  return __primary_isset;
}

- (void) unsetPrimary {
  __primary_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            DailyHours *_elem7 = [[DailyHours alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyHours: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPrimary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BusinessHours"];
  if (__dailyHours_isset) {
    if (__dailyHours != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyHours" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__dailyHours count]];
        int i9;
        for (i9 = 0; i9 < [__dailyHours count]; i9++)
        {
          [[__dailyHours objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__primary_isset) {
    [outProtocol writeFieldBeginWithName: @"primary" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __primary];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BusinessHours("];
  [ms appendString: @"dailyHours:"];
  [ms appendFormat: @"%@", __dailyHours];
  [ms appendString: @",primary:"];
  [ms appendFormat: @"%i", __primary];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NameAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status name: (NSString *) name alternative: (BOOL) alternative
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __alternative = alternative;
  __alternative_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternative"])
  {
    __alternative = [decoder decodeBoolForKey: @"alternative"];
    __alternative_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__alternative_isset)
  {
    [encoder encodeBool: __alternative forKey: @"alternative"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (BOOL) alternative {
  return __alternative;
}

- (void) setAlternative: (BOOL) alternative {
  __alternative = alternative;
  __alternative_isset = YES;
}

- (BOOL) alternativeIsSet {
  return __alternative_isset;
}

- (void) unsetAlternative {
  __alternative_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlternative: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NameAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternative_isset) {
    [outProtocol writeFieldBeginWithName: @"alternative" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __alternative];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NameAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",alternative:"];
  [ms appendFormat: @"%i", __alternative];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddressAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status address: (Address *) address alternative: (BOOL) alternative
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __alternative = alternative;
  __alternative_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternative"])
  {
    __alternative = [decoder decodeBoolForKey: @"alternative"];
    __alternative_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__alternative_isset)
  {
    [encoder encodeBool: __alternative forKey: @"alternative"];
  }
}

- (void) dealloc
{
  [__address release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (Address *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (Address *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (BOOL) alternative {
  return __alternative;
}

- (void) setAlternative: (BOOL) alternative {
  __alternative = alternative;
  __alternative_isset = YES;
}

- (BOOL) alternativeIsSet {
  return __alternative_isset;
}

- (void) unsetAlternative {
  __alternative_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Address *fieldValue = [[Address alloc] init];
          [fieldValue read: inProtocol];
          [self setAddress: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlternative: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddressAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRUCT fieldID: 2];
      [__address write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternative_isset) {
    [outProtocol writeFieldBeginWithName: @"alternative" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __alternative];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddressAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",address:"];
  [ms appendFormat: @"%@", __address];
  [ms appendString: @",alternative:"];
  [ms appendFormat: @"%i", __alternative];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PhoneAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status phone: (NSString *) phone alternative: (BOOL) alternative
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __alternative = alternative;
  __alternative_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternative"])
  {
    __alternative = [decoder decodeBoolForKey: @"alternative"];
    __alternative_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__alternative_isset)
  {
    [encoder encodeBool: __alternative forKey: @"alternative"];
  }
}

- (void) dealloc
{
  [__phone release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (BOOL) alternative {
  return __alternative;
}

- (void) setAlternative: (BOOL) alternative {
  __alternative = alternative;
  __alternative_isset = YES;
}

- (BOOL) alternativeIsSet {
  return __alternative_isset;
}

- (void) unsetAlternative {
  __alternative_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlternative: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhoneAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternative_isset) {
    [outProtocol writeFieldBeginWithName: @"alternative" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __alternative];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PhoneAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",alternative:"];
  [ms appendFormat: @"%i", __alternative];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation WebAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status web: (NSString *) web alternative: (BOOL) alternative
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __web = [web retain_stub];
  __web_isset = YES;
  __alternative = alternative;
  __alternative_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"web"])
  {
    __web = [[decoder decodeObjectForKey: @"web"] retain_stub];
    __web_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternative"])
  {
    __alternative = [decoder decodeBoolForKey: @"alternative"];
    __alternative_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__web_isset)
  {
    [encoder encodeObject: __web forKey: @"web"];
  }
  if (__alternative_isset)
  {
    [encoder encodeBool: __alternative forKey: @"alternative"];
  }
}

- (void) dealloc
{
  [__web release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) web {
  return [[__web retain_stub] autorelease_stub];
}

- (void) setWeb: (NSString *) web {
  [web retain_stub];
  [__web release_stub];
  __web = web;
  __web_isset = YES;
}

- (BOOL) webIsSet {
  return __web_isset;
}

- (void) unsetWeb {
  [__web release_stub];
  __web = nil;
  __web_isset = NO;
}

- (BOOL) alternative {
  return __alternative;
}

- (void) setAlternative: (BOOL) alternative {
  __alternative = alternative;
  __alternative_isset = YES;
}

- (BOOL) alternativeIsSet {
  return __alternative_isset;
}

- (void) unsetAlternative {
  __alternative_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeb: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlternative: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WebAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__web_isset) {
    if (__web != nil) {
      [outProtocol writeFieldBeginWithName: @"web" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __web];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternative_isset) {
    [outProtocol writeFieldBeginWithName: @"alternative" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __alternative];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"WebAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",web:"];
  [ms appendFormat: @"\"%@\"", __web];
  [ms appendString: @",alternative:"];
  [ms appendFormat: @"%i", __alternative];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PhotosAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status photos: (NSMutableArray *) photos
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __photos = [photos retain_stub];
  __photos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"photos"])
  {
    __photos = [[decoder decodeObjectForKey: @"photos"] retain_stub];
    __photos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__photos_isset)
  {
    [encoder encodeObject: __photos forKey: @"photos"];
  }
}

- (void) dealloc
{
  [__photos release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSMutableArray *) photos {
  return [[__photos retain_stub] autorelease_stub];
}

- (void) setPhotos: (NSMutableArray *) photos {
  [photos retain_stub];
  [__photos release_stub];
  __photos = photos;
  __photos_isset = YES;
}

- (BOOL) photosIsSet {
  return __photos_isset;
}

- (void) unsetPhotos {
  [__photos release_stub];
  __photos = nil;
  __photos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setPhotos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhotosAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__photos_isset) {
    if (__photos != nil) {
      [outProtocol writeFieldBeginWithName: @"photos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: (int)[__photos count]];
        int i14;
        for (i14 = 0; i14 < [__photos count]; i14++)
        {
          [outProtocol writeString: [__photos objectAtIndex: i14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PhotosAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",photos:"];
  [ms appendFormat: @"%@", __photos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CategoriesAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status categories: (NSMutableArray *) categories
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __categories = [categories retain_stub];
  __categories_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"categories"])
  {
    __categories = [[decoder decodeObjectForKey: @"categories"] retain_stub];
    __categories_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__categories_isset)
  {
    [encoder encodeObject: __categories forKey: @"categories"];
  }
}

- (void) dealloc
{
  [__categories release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSMutableArray *) categories {
  return [[__categories retain_stub] autorelease_stub];
}

- (void) setCategories: (NSMutableArray *) categories {
  [categories retain_stub];
  [__categories release_stub];
  __categories = categories;
  __categories_isset = YES;
}

- (BOOL) categoriesIsSet {
  return __categories_isset;
}

- (void) unsetCategories {
  [__categories release_stub];
  __categories = nil;
  __categories_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setCategories: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CategoriesAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__categories_isset) {
    if (__categories != nil) {
      [outProtocol writeFieldBeginWithName: @"categories" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: (int)[__categories count]];
        int i19;
        for (i19 = 0; i19 < [__categories count]; i19++)
        {
          [outProtocol writeString: [__categories objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CategoriesAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",categories:"];
  [ms appendFormat: @"%@", __categories];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BusinessHoursAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status businessHours: (NSMutableArray *) businessHours
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __businessHours = [businessHours retain_stub];
  __businessHours_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessHours"])
  {
    __businessHours = [[decoder decodeObjectForKey: @"businessHours"] retain_stub];
    __businessHours_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__businessHours_isset)
  {
    [encoder encodeObject: __businessHours forKey: @"businessHours"];
  }
}

- (void) dealloc
{
  [__businessHours release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSMutableArray *) businessHours {
  return [[__businessHours retain_stub] autorelease_stub];
}

- (void) setBusinessHours: (NSMutableArray *) businessHours {
  [businessHours retain_stub];
  [__businessHours release_stub];
  __businessHours = businessHours;
  __businessHours_isset = YES;
}

- (BOOL) businessHoursIsSet {
  return __businessHours_isset;
}

- (void) unsetBusinessHours {
  [__businessHours release_stub];
  __businessHours = nil;
  __businessHours_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            BusinessHours *_elem22 = [[BusinessHours alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setBusinessHours: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BusinessHoursAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__businessHours_isset) {
    if (__businessHours != nil) {
      [outProtocol writeFieldBeginWithName: @"businessHours" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__businessHours count]];
        int i24;
        for (i24 = 0; i24 < [__businessHours count]; i24++)
        {
          [[__businessHours objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BusinessHoursAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",businessHours:"];
  [ms appendFormat: @"%@", __businessHours];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DescriptionAttribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int) status descriptionAttr: (NSString *) descriptionAttr alternative: (BOOL) alternative
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __descriptionAttr = [descriptionAttr retain_stub];
  __descriptionAttr_isset = YES;
  __alternative = alternative;
  __alternative_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"descriptionAttr"])
  {
    __descriptionAttr = [[decoder decodeObjectForKey: @"descriptionAttr"] retain_stub];
    __descriptionAttr_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternative"])
  {
    __alternative = [decoder decodeBoolForKey: @"alternative"];
    __alternative_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__descriptionAttr_isset)
  {
    [encoder encodeObject: __descriptionAttr forKey: @"descriptionAttr"];
  }
  if (__alternative_isset)
  {
    [encoder encodeBool: __alternative forKey: @"alternative"];
  }
}

- (void) dealloc
{
  [__descriptionAttr release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) descriptionAttr {
  return [[__descriptionAttr retain_stub] autorelease_stub];
}

- (void) setDescriptionAttr: (NSString *) descriptionAttr {
  [descriptionAttr retain_stub];
  [__descriptionAttr release_stub];
  __descriptionAttr = descriptionAttr;
  __descriptionAttr_isset = YES;
}

- (BOOL) descriptionAttrIsSet {
  return __descriptionAttr_isset;
}

- (void) unsetDescriptionAttr {
  [__descriptionAttr release_stub];
  __descriptionAttr = nil;
  __descriptionAttr_isset = NO;
}

- (BOOL) alternative {
  return __alternative;
}

- (void) setAlternative: (BOOL) alternative {
  __alternative = alternative;
  __alternative_isset = YES;
}

- (BOOL) alternativeIsSet {
  return __alternative_isset;
}

- (void) unsetAlternative {
  __alternative_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescriptionAttr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlternative: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DescriptionAttribute"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__descriptionAttr_isset) {
    if (__descriptionAttr != nil) {
      [outProtocol writeFieldBeginWithName: @"descriptionAttr" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __descriptionAttr];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternative_isset) {
    [outProtocol writeFieldBeginWithName: @"alternative" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __alternative];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DescriptionAttribute("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",descriptionAttr:"];
  [ms appendFormat: @"\"%@\"", __descriptionAttr];
  [ms appendString: @",alternative:"];
  [ms appendFormat: @"%i", __alternative];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SourceListing

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id listingAuditID: (NSString *) listingAuditID locationID: (NSString *) locationID listingStatus: (int) listingStatus sourceId: (NSString *) sourceId sourceName: (NSString *) sourceName sourceSmallIconPath: (NSString *) sourceSmallIconPath sourceLargeIconPath: (NSString *) sourceLargeIconPath url: (NSString *) url sourceListingState: (int) sourceListingState claimedState: (int) claimedState nameAttribute: (NameAttribute *) nameAttribute addressAttribute: (AddressAttribute *) addressAttribute phoneAttribute: (PhoneAttribute *) phoneAttribute webAttribute: (WebAttribute *) webAttribute photosAttribute: (PhotosAttribute *) photosAttribute categoriesAttribute: (CategoriesAttribute *) categoriesAttribute businessHoursAttribute: (BusinessHoursAttribute *) businessHoursAttribute descriptionAttribute: (DescriptionAttribute *) descriptionAttribute score: (double) score fixDate: (int64_t) fixDate notes: (NSString *) notes
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __listingAuditID = [listingAuditID retain_stub];
  __listingAuditID_isset = YES;
  __locationID = [locationID retain_stub];
  __locationID_isset = YES;
  __listingStatus = listingStatus;
  __listingStatus_isset = YES;
  __sourceId = [sourceId retain_stub];
  __sourceId_isset = YES;
  __sourceName = [sourceName retain_stub];
  __sourceName_isset = YES;
  __sourceSmallIconPath = [sourceSmallIconPath retain_stub];
  __sourceSmallIconPath_isset = YES;
  __sourceLargeIconPath = [sourceLargeIconPath retain_stub];
  __sourceLargeIconPath_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __sourceListingState = sourceListingState;
  __sourceListingState_isset = YES;
  __claimedState = claimedState;
  __claimedState_isset = YES;
  __nameAttribute = [nameAttribute retain_stub];
  __nameAttribute_isset = YES;
  __addressAttribute = [addressAttribute retain_stub];
  __addressAttribute_isset = YES;
  __phoneAttribute = [phoneAttribute retain_stub];
  __phoneAttribute_isset = YES;
  __webAttribute = [webAttribute retain_stub];
  __webAttribute_isset = YES;
  __photosAttribute = [photosAttribute retain_stub];
  __photosAttribute_isset = YES;
  __categoriesAttribute = [categoriesAttribute retain_stub];
  __categoriesAttribute_isset = YES;
  __businessHoursAttribute = [businessHoursAttribute retain_stub];
  __businessHoursAttribute_isset = YES;
  __descriptionAttribute = [descriptionAttribute retain_stub];
  __descriptionAttribute_isset = YES;
  __score = score;
  __score_isset = YES;
  __fixDate = fixDate;
  __fixDate_isset = YES;
  __notes = [notes retain_stub];
  __notes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"listingAuditID"])
  {
    __listingAuditID = [[decoder decodeObjectForKey: @"listingAuditID"] retain_stub];
    __listingAuditID_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationID"])
  {
    __locationID = [[decoder decodeObjectForKey: @"locationID"] retain_stub];
    __locationID_isset = YES;
  }
  if ([decoder containsValueForKey: @"listingStatus"])
  {
    __listingStatus = [decoder decodeIntForKey: @"listingStatus"];
    __listingStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceId"])
  {
    __sourceId = [[decoder decodeObjectForKey: @"sourceId"] retain_stub];
    __sourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceName"])
  {
    __sourceName = [[decoder decodeObjectForKey: @"sourceName"] retain_stub];
    __sourceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceSmallIconPath"])
  {
    __sourceSmallIconPath = [[decoder decodeObjectForKey: @"sourceSmallIconPath"] retain_stub];
    __sourceSmallIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceLargeIconPath"])
  {
    __sourceLargeIconPath = [[decoder decodeObjectForKey: @"sourceLargeIconPath"] retain_stub];
    __sourceLargeIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceListingState"])
  {
    __sourceListingState = [decoder decodeIntForKey: @"sourceListingState"];
    __sourceListingState_isset = YES;
  }
  if ([decoder containsValueForKey: @"claimedState"])
  {
    __claimedState = [decoder decodeIntForKey: @"claimedState"];
    __claimedState_isset = YES;
  }
  if ([decoder containsValueForKey: @"nameAttribute"])
  {
    __nameAttribute = [[decoder decodeObjectForKey: @"nameAttribute"] retain_stub];
    __nameAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"addressAttribute"])
  {
    __addressAttribute = [[decoder decodeObjectForKey: @"addressAttribute"] retain_stub];
    __addressAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneAttribute"])
  {
    __phoneAttribute = [[decoder decodeObjectForKey: @"phoneAttribute"] retain_stub];
    __phoneAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"webAttribute"])
  {
    __webAttribute = [[decoder decodeObjectForKey: @"webAttribute"] retain_stub];
    __webAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"photosAttribute"])
  {
    __photosAttribute = [[decoder decodeObjectForKey: @"photosAttribute"] retain_stub];
    __photosAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"categoriesAttribute"])
  {
    __categoriesAttribute = [[decoder decodeObjectForKey: @"categoriesAttribute"] retain_stub];
    __categoriesAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessHoursAttribute"])
  {
    __businessHoursAttribute = [[decoder decodeObjectForKey: @"businessHoursAttribute"] retain_stub];
    __businessHoursAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"descriptionAttribute"])
  {
    __descriptionAttribute = [[decoder decodeObjectForKey: @"descriptionAttribute"] retain_stub];
    __descriptionAttribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeDoubleForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"fixDate"])
  {
    __fixDate = [decoder decodeInt64ForKey: @"fixDate"];
    __fixDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"notes"])
  {
    __notes = [[decoder decodeObjectForKey: @"notes"] retain_stub];
    __notes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__listingAuditID_isset)
  {
    [encoder encodeObject: __listingAuditID forKey: @"listingAuditID"];
  }
  if (__locationID_isset)
  {
    [encoder encodeObject: __locationID forKey: @"locationID"];
  }
  if (__listingStatus_isset)
  {
    [encoder encodeInt: __listingStatus forKey: @"listingStatus"];
  }
  if (__sourceId_isset)
  {
    [encoder encodeObject: __sourceId forKey: @"sourceId"];
  }
  if (__sourceName_isset)
  {
    [encoder encodeObject: __sourceName forKey: @"sourceName"];
  }
  if (__sourceSmallIconPath_isset)
  {
    [encoder encodeObject: __sourceSmallIconPath forKey: @"sourceSmallIconPath"];
  }
  if (__sourceLargeIconPath_isset)
  {
    [encoder encodeObject: __sourceLargeIconPath forKey: @"sourceLargeIconPath"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__sourceListingState_isset)
  {
    [encoder encodeInt: __sourceListingState forKey: @"sourceListingState"];
  }
  if (__claimedState_isset)
  {
    [encoder encodeInt: __claimedState forKey: @"claimedState"];
  }
  if (__nameAttribute_isset)
  {
    [encoder encodeObject: __nameAttribute forKey: @"nameAttribute"];
  }
  if (__addressAttribute_isset)
  {
    [encoder encodeObject: __addressAttribute forKey: @"addressAttribute"];
  }
  if (__phoneAttribute_isset)
  {
    [encoder encodeObject: __phoneAttribute forKey: @"phoneAttribute"];
  }
  if (__webAttribute_isset)
  {
    [encoder encodeObject: __webAttribute forKey: @"webAttribute"];
  }
  if (__photosAttribute_isset)
  {
    [encoder encodeObject: __photosAttribute forKey: @"photosAttribute"];
  }
  if (__categoriesAttribute_isset)
  {
    [encoder encodeObject: __categoriesAttribute forKey: @"categoriesAttribute"];
  }
  if (__businessHoursAttribute_isset)
  {
    [encoder encodeObject: __businessHoursAttribute forKey: @"businessHoursAttribute"];
  }
  if (__descriptionAttribute_isset)
  {
    [encoder encodeObject: __descriptionAttribute forKey: @"descriptionAttribute"];
  }
  if (__score_isset)
  {
    [encoder encodeDouble: __score forKey: @"score"];
  }
  if (__fixDate_isset)
  {
    [encoder encodeInt64: __fixDate forKey: @"fixDate"];
  }
  if (__notes_isset)
  {
    [encoder encodeObject: __notes forKey: @"notes"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__listingAuditID release_stub];
  [__locationID release_stub];
  [__sourceId release_stub];
  [__sourceName release_stub];
  [__sourceSmallIconPath release_stub];
  [__sourceLargeIconPath release_stub];
  [__url release_stub];
  [__nameAttribute release_stub];
  [__addressAttribute release_stub];
  [__phoneAttribute release_stub];
  [__webAttribute release_stub];
  [__photosAttribute release_stub];
  [__categoriesAttribute release_stub];
  [__businessHoursAttribute release_stub];
  [__descriptionAttribute release_stub];
  [__notes release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) listingAuditID {
  return [[__listingAuditID retain_stub] autorelease_stub];
}

- (void) setListingAuditID: (NSString *) listingAuditID {
  [listingAuditID retain_stub];
  [__listingAuditID release_stub];
  __listingAuditID = listingAuditID;
  __listingAuditID_isset = YES;
}

- (BOOL) listingAuditIDIsSet {
  return __listingAuditID_isset;
}

- (void) unsetListingAuditID {
  [__listingAuditID release_stub];
  __listingAuditID = nil;
  __listingAuditID_isset = NO;
}

- (NSString *) locationID {
  return [[__locationID retain_stub] autorelease_stub];
}

- (void) setLocationID: (NSString *) locationID {
  [locationID retain_stub];
  [__locationID release_stub];
  __locationID = locationID;
  __locationID_isset = YES;
}

- (BOOL) locationIDIsSet {
  return __locationID_isset;
}

- (void) unsetLocationID {
  [__locationID release_stub];
  __locationID = nil;
  __locationID_isset = NO;
}

- (int) listingStatus {
  return __listingStatus;
}

- (void) setListingStatus: (int) listingStatus {
  __listingStatus = listingStatus;
  __listingStatus_isset = YES;
}

- (BOOL) listingStatusIsSet {
  return __listingStatus_isset;
}

- (void) unsetListingStatus {
  __listingStatus_isset = NO;
}

- (NSString *) sourceId {
  return [[__sourceId retain_stub] autorelease_stub];
}

- (void) setSourceId: (NSString *) sourceId {
  [sourceId retain_stub];
  [__sourceId release_stub];
  __sourceId = sourceId;
  __sourceId_isset = YES;
}

- (BOOL) sourceIdIsSet {
  return __sourceId_isset;
}

- (void) unsetSourceId {
  [__sourceId release_stub];
  __sourceId = nil;
  __sourceId_isset = NO;
}

- (NSString *) sourceName {
  return [[__sourceName retain_stub] autorelease_stub];
}

- (void) setSourceName: (NSString *) sourceName {
  [sourceName retain_stub];
  [__sourceName release_stub];
  __sourceName = sourceName;
  __sourceName_isset = YES;
}

- (BOOL) sourceNameIsSet {
  return __sourceName_isset;
}

- (void) unsetSourceName {
  [__sourceName release_stub];
  __sourceName = nil;
  __sourceName_isset = NO;
}

- (NSString *) sourceSmallIconPath {
  return [[__sourceSmallIconPath retain_stub] autorelease_stub];
}

- (void) setSourceSmallIconPath: (NSString *) sourceSmallIconPath {
  [sourceSmallIconPath retain_stub];
  [__sourceSmallIconPath release_stub];
  __sourceSmallIconPath = sourceSmallIconPath;
  __sourceSmallIconPath_isset = YES;
}

- (BOOL) sourceSmallIconPathIsSet {
  return __sourceSmallIconPath_isset;
}

- (void) unsetSourceSmallIconPath {
  [__sourceSmallIconPath release_stub];
  __sourceSmallIconPath = nil;
  __sourceSmallIconPath_isset = NO;
}

- (NSString *) sourceLargeIconPath {
  return [[__sourceLargeIconPath retain_stub] autorelease_stub];
}

- (void) setSourceLargeIconPath: (NSString *) sourceLargeIconPath {
  [sourceLargeIconPath retain_stub];
  [__sourceLargeIconPath release_stub];
  __sourceLargeIconPath = sourceLargeIconPath;
  __sourceLargeIconPath_isset = YES;
}

- (BOOL) sourceLargeIconPathIsSet {
  return __sourceLargeIconPath_isset;
}

- (void) unsetSourceLargeIconPath {
  [__sourceLargeIconPath release_stub];
  __sourceLargeIconPath = nil;
  __sourceLargeIconPath_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (int) sourceListingState {
  return __sourceListingState;
}

- (void) setSourceListingState: (int) sourceListingState {
  __sourceListingState = sourceListingState;
  __sourceListingState_isset = YES;
}

- (BOOL) sourceListingStateIsSet {
  return __sourceListingState_isset;
}

- (void) unsetSourceListingState {
  __sourceListingState_isset = NO;
}

- (int) claimedState {
  return __claimedState;
}

- (void) setClaimedState: (int) claimedState {
  __claimedState = claimedState;
  __claimedState_isset = YES;
}

- (BOOL) claimedStateIsSet {
  return __claimedState_isset;
}

- (void) unsetClaimedState {
  __claimedState_isset = NO;
}

- (NameAttribute *) nameAttribute {
  return [[__nameAttribute retain_stub] autorelease_stub];
}

- (void) setNameAttribute: (NameAttribute *) nameAttribute {
  [nameAttribute retain_stub];
  [__nameAttribute release_stub];
  __nameAttribute = nameAttribute;
  __nameAttribute_isset = YES;
}

- (BOOL) nameAttributeIsSet {
  return __nameAttribute_isset;
}

- (void) unsetNameAttribute {
  [__nameAttribute release_stub];
  __nameAttribute = nil;
  __nameAttribute_isset = NO;
}

- (AddressAttribute *) addressAttribute {
  return [[__addressAttribute retain_stub] autorelease_stub];
}

- (void) setAddressAttribute: (AddressAttribute *) addressAttribute {
  [addressAttribute retain_stub];
  [__addressAttribute release_stub];
  __addressAttribute = addressAttribute;
  __addressAttribute_isset = YES;
}

- (BOOL) addressAttributeIsSet {
  return __addressAttribute_isset;
}

- (void) unsetAddressAttribute {
  [__addressAttribute release_stub];
  __addressAttribute = nil;
  __addressAttribute_isset = NO;
}

- (PhoneAttribute *) phoneAttribute {
  return [[__phoneAttribute retain_stub] autorelease_stub];
}

- (void) setPhoneAttribute: (PhoneAttribute *) phoneAttribute {
  [phoneAttribute retain_stub];
  [__phoneAttribute release_stub];
  __phoneAttribute = phoneAttribute;
  __phoneAttribute_isset = YES;
}

- (BOOL) phoneAttributeIsSet {
  return __phoneAttribute_isset;
}

- (void) unsetPhoneAttribute {
  [__phoneAttribute release_stub];
  __phoneAttribute = nil;
  __phoneAttribute_isset = NO;
}

- (WebAttribute *) webAttribute {
  return [[__webAttribute retain_stub] autorelease_stub];
}

- (void) setWebAttribute: (WebAttribute *) webAttribute {
  [webAttribute retain_stub];
  [__webAttribute release_stub];
  __webAttribute = webAttribute;
  __webAttribute_isset = YES;
}

- (BOOL) webAttributeIsSet {
  return __webAttribute_isset;
}

- (void) unsetWebAttribute {
  [__webAttribute release_stub];
  __webAttribute = nil;
  __webAttribute_isset = NO;
}

- (PhotosAttribute *) photosAttribute {
  return [[__photosAttribute retain_stub] autorelease_stub];
}

- (void) setPhotosAttribute: (PhotosAttribute *) photosAttribute {
  [photosAttribute retain_stub];
  [__photosAttribute release_stub];
  __photosAttribute = photosAttribute;
  __photosAttribute_isset = YES;
}

- (BOOL) photosAttributeIsSet {
  return __photosAttribute_isset;
}

- (void) unsetPhotosAttribute {
  [__photosAttribute release_stub];
  __photosAttribute = nil;
  __photosAttribute_isset = NO;
}

- (CategoriesAttribute *) categoriesAttribute {
  return [[__categoriesAttribute retain_stub] autorelease_stub];
}

- (void) setCategoriesAttribute: (CategoriesAttribute *) categoriesAttribute {
  [categoriesAttribute retain_stub];
  [__categoriesAttribute release_stub];
  __categoriesAttribute = categoriesAttribute;
  __categoriesAttribute_isset = YES;
}

- (BOOL) categoriesAttributeIsSet {
  return __categoriesAttribute_isset;
}

- (void) unsetCategoriesAttribute {
  [__categoriesAttribute release_stub];
  __categoriesAttribute = nil;
  __categoriesAttribute_isset = NO;
}

- (BusinessHoursAttribute *) businessHoursAttribute {
  return [[__businessHoursAttribute retain_stub] autorelease_stub];
}

- (void) setBusinessHoursAttribute: (BusinessHoursAttribute *) businessHoursAttribute {
  [businessHoursAttribute retain_stub];
  [__businessHoursAttribute release_stub];
  __businessHoursAttribute = businessHoursAttribute;
  __businessHoursAttribute_isset = YES;
}

- (BOOL) businessHoursAttributeIsSet {
  return __businessHoursAttribute_isset;
}

- (void) unsetBusinessHoursAttribute {
  [__businessHoursAttribute release_stub];
  __businessHoursAttribute = nil;
  __businessHoursAttribute_isset = NO;
}

- (DescriptionAttribute *) descriptionAttribute {
  return [[__descriptionAttribute retain_stub] autorelease_stub];
}

- (void) setDescriptionAttribute: (DescriptionAttribute *) descriptionAttribute {
  [descriptionAttribute retain_stub];
  [__descriptionAttribute release_stub];
  __descriptionAttribute = descriptionAttribute;
  __descriptionAttribute_isset = YES;
}

- (BOOL) descriptionAttributeIsSet {
  return __descriptionAttribute_isset;
}

- (void) unsetDescriptionAttribute {
  [__descriptionAttribute release_stub];
  __descriptionAttribute = nil;
  __descriptionAttribute_isset = NO;
}

- (double) score {
  return __score;
}

- (void) setScore: (double) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (int64_t) fixDate {
  return __fixDate;
}

- (void) setFixDate: (int64_t) fixDate {
  __fixDate = fixDate;
  __fixDate_isset = YES;
}

- (BOOL) fixDateIsSet {
  return __fixDate_isset;
}

- (void) unsetFixDate {
  __fixDate_isset = NO;
}

- (NSString *) notes {
  return [[__notes retain_stub] autorelease_stub];
}

- (void) setNotes: (NSString *) notes {
  [notes retain_stub];
  [__notes release_stub];
  __notes = notes;
  __notes_isset = YES;
}

- (BOOL) notesIsSet {
  return __notes_isset;
}

- (void) unsetNotes {
  [__notes release_stub];
  __notes = nil;
  __notes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setListingAuditID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setListingStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceSmallIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceLargeIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSourceListingState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClaimedState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          NameAttribute *fieldValue = [[NameAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setNameAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          AddressAttribute *fieldValue = [[AddressAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setAddressAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRUCT) {
          PhoneAttribute *fieldValue = [[PhoneAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setPhoneAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          WebAttribute *fieldValue = [[WebAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setWebAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRUCT) {
          PhotosAttribute *fieldValue = [[PhotosAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setPhotosAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRUCT) {
          CategoriesAttribute *fieldValue = [[CategoriesAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setCategoriesAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRUCT) {
          BusinessHoursAttribute *fieldValue = [[BusinessHoursAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setBusinessHoursAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRUCT) {
          DescriptionAttribute *fieldValue = [[DescriptionAttribute alloc] init];
          [fieldValue read: inProtocol];
          [self setDescriptionAttribute: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFixDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SourceListing"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__listingAuditID_isset) {
    if (__listingAuditID != nil) {
      [outProtocol writeFieldBeginWithName: @"listingAuditID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __listingAuditID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationID_isset) {
    if (__locationID != nil) {
      [outProtocol writeFieldBeginWithName: @"locationID" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __locationID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__listingStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"listingStatus" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __listingStatus];
    [outProtocol writeFieldEnd];
  }
  if (__sourceId_isset) {
    if (__sourceId != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __sourceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceName_isset) {
    if (__sourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __sourceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceSmallIconPath_isset) {
    if (__sourceSmallIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceSmallIconPath" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __sourceSmallIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceLargeIconPath_isset) {
    if (__sourceLargeIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceLargeIconPath" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __sourceLargeIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceListingState_isset) {
    [outProtocol writeFieldBeginWithName: @"sourceListingState" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __sourceListingState];
    [outProtocol writeFieldEnd];
  }
  if (__claimedState_isset) {
    [outProtocol writeFieldBeginWithName: @"claimedState" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __claimedState];
    [outProtocol writeFieldEnd];
  }
  if (__nameAttribute_isset) {
    if (__nameAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"nameAttribute" type: TType_STRUCT fieldID: 12];
      [__nameAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addressAttribute_isset) {
    if (__addressAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"addressAttribute" type: TType_STRUCT fieldID: 13];
      [__addressAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneAttribute_isset) {
    if (__phoneAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneAttribute" type: TType_STRUCT fieldID: 14];
      [__phoneAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__webAttribute_isset) {
    if (__webAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"webAttribute" type: TType_STRUCT fieldID: 15];
      [__webAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photosAttribute_isset) {
    if (__photosAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"photosAttribute" type: TType_STRUCT fieldID: 16];
      [__photosAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__categoriesAttribute_isset) {
    if (__categoriesAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"categoriesAttribute" type: TType_STRUCT fieldID: 17];
      [__categoriesAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessHoursAttribute_isset) {
    if (__businessHoursAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"businessHoursAttribute" type: TType_STRUCT fieldID: 18];
      [__businessHoursAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__descriptionAttribute_isset) {
    if (__descriptionAttribute != nil) {
      [outProtocol writeFieldBeginWithName: @"descriptionAttribute" type: TType_STRUCT fieldID: 19];
      [__descriptionAttribute write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_DOUBLE fieldID: 20];
    [outProtocol writeDouble: __score];
    [outProtocol writeFieldEnd];
  }
  if (__fixDate_isset) {
    [outProtocol writeFieldBeginWithName: @"fixDate" type: TType_I64 fieldID: 21];
    [outProtocol writeI64: __fixDate];
    [outProtocol writeFieldEnd];
  }
  if (__notes_isset) {
    if (__notes != nil) {
      [outProtocol writeFieldBeginWithName: @"notes" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __notes];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SourceListing("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",listingAuditID:"];
  [ms appendFormat: @"\"%@\"", __listingAuditID];
  [ms appendString: @",locationID:"];
  [ms appendFormat: @"\"%@\"", __locationID];
  [ms appendString: @",listingStatus:"];
  [ms appendFormat: @"%i", __listingStatus];
  [ms appendString: @",sourceId:"];
  [ms appendFormat: @"\"%@\"", __sourceId];
  [ms appendString: @",sourceName:"];
  [ms appendFormat: @"\"%@\"", __sourceName];
  [ms appendString: @",sourceSmallIconPath:"];
  [ms appendFormat: @"\"%@\"", __sourceSmallIconPath];
  [ms appendString: @",sourceLargeIconPath:"];
  [ms appendFormat: @"\"%@\"", __sourceLargeIconPath];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",sourceListingState:"];
  [ms appendFormat: @"%i", __sourceListingState];
  [ms appendString: @",claimedState:"];
  [ms appendFormat: @"%i", __claimedState];
  [ms appendString: @",nameAttribute:"];
  [ms appendFormat: @"%@", __nameAttribute];
  [ms appendString: @",addressAttribute:"];
  [ms appendFormat: @"%@", __addressAttribute];
  [ms appendString: @",phoneAttribute:"];
  [ms appendFormat: @"%@", __phoneAttribute];
  [ms appendString: @",webAttribute:"];
  [ms appendFormat: @"%@", __webAttribute];
  [ms appendString: @",photosAttribute:"];
  [ms appendFormat: @"%@", __photosAttribute];
  [ms appendString: @",categoriesAttribute:"];
  [ms appendFormat: @"%@", __categoriesAttribute];
  [ms appendString: @",businessHoursAttribute:"];
  [ms appendFormat: @"%@", __businessHoursAttribute];
  [ms appendString: @",descriptionAttribute:"];
  [ms appendFormat: @"%@", __descriptionAttribute];
  [ms appendString: @",score:"];
  [ms appendFormat: @"%f", __score];
  [ms appendString: @",fixDate:"];
  [ms appendFormat: @"%qi", __fixDate];
  [ms appendString: @",notes:"];
  [ms appendFormat: @"\"%@\"", __notes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LocationListing

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithListingID: (NSString *) listingID locationID: (NSString *) locationID locationName: (NSString *) locationName sourceListings: (NSMutableArray *) sourceListings score: (double) score expected: (int32_t) expected missing: (int32_t) missing duplicate: (int32_t) duplicate incorrect: (int32_t) incorrect correct: (int32_t) correct claimed: (int32_t) claimed unclaimed: (int32_t) unclaimed fixDate: (int64_t) fixDate
{
  self = [super init];
  __listingID = [listingID retain_stub];
  __listingID_isset = YES;
  __locationID = [locationID retain_stub];
  __locationID_isset = YES;
  __locationName = [locationName retain_stub];
  __locationName_isset = YES;
  __sourceListings = [sourceListings retain_stub];
  __sourceListings_isset = YES;
  __score = score;
  __score_isset = YES;
  __expected = expected;
  __expected_isset = YES;
  __missing = missing;
  __missing_isset = YES;
  __duplicate = duplicate;
  __duplicate_isset = YES;
  __incorrect = incorrect;
  __incorrect_isset = YES;
  __correct = correct;
  __correct_isset = YES;
  __claimed = claimed;
  __claimed_isset = YES;
  __unclaimed = unclaimed;
  __unclaimed_isset = YES;
  __fixDate = fixDate;
  __fixDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"listingID"])
  {
    __listingID = [[decoder decodeObjectForKey: @"listingID"] retain_stub];
    __listingID_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationID"])
  {
    __locationID = [[decoder decodeObjectForKey: @"locationID"] retain_stub];
    __locationID_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationName"])
  {
    __locationName = [[decoder decodeObjectForKey: @"locationName"] retain_stub];
    __locationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceListings"])
  {
    __sourceListings = [[decoder decodeObjectForKey: @"sourceListings"] retain_stub];
    __sourceListings_isset = YES;
  }
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeDoubleForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"expected"])
  {
    __expected = [decoder decodeInt32ForKey: @"expected"];
    __expected_isset = YES;
  }
  if ([decoder containsValueForKey: @"missing"])
  {
    __missing = [decoder decodeInt32ForKey: @"missing"];
    __missing_isset = YES;
  }
  if ([decoder containsValueForKey: @"duplicate"])
  {
    __duplicate = [decoder decodeInt32ForKey: @"duplicate"];
    __duplicate_isset = YES;
  }
  if ([decoder containsValueForKey: @"incorrect"])
  {
    __incorrect = [decoder decodeInt32ForKey: @"incorrect"];
    __incorrect_isset = YES;
  }
  if ([decoder containsValueForKey: @"correct"])
  {
    __correct = [decoder decodeInt32ForKey: @"correct"];
    __correct_isset = YES;
  }
  if ([decoder containsValueForKey: @"claimed"])
  {
    __claimed = [decoder decodeInt32ForKey: @"claimed"];
    __claimed_isset = YES;
  }
  if ([decoder containsValueForKey: @"unclaimed"])
  {
    __unclaimed = [decoder decodeInt32ForKey: @"unclaimed"];
    __unclaimed_isset = YES;
  }
  if ([decoder containsValueForKey: @"fixDate"])
  {
    __fixDate = [decoder decodeInt64ForKey: @"fixDate"];
    __fixDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__listingID_isset)
  {
    [encoder encodeObject: __listingID forKey: @"listingID"];
  }
  if (__locationID_isset)
  {
    [encoder encodeObject: __locationID forKey: @"locationID"];
  }
  if (__locationName_isset)
  {
    [encoder encodeObject: __locationName forKey: @"locationName"];
  }
  if (__sourceListings_isset)
  {
    [encoder encodeObject: __sourceListings forKey: @"sourceListings"];
  }
  if (__score_isset)
  {
    [encoder encodeDouble: __score forKey: @"score"];
  }
  if (__expected_isset)
  {
    [encoder encodeInt32: __expected forKey: @"expected"];
  }
  if (__missing_isset)
  {
    [encoder encodeInt32: __missing forKey: @"missing"];
  }
  if (__duplicate_isset)
  {
    [encoder encodeInt32: __duplicate forKey: @"duplicate"];
  }
  if (__incorrect_isset)
  {
    [encoder encodeInt32: __incorrect forKey: @"incorrect"];
  }
  if (__correct_isset)
  {
    [encoder encodeInt32: __correct forKey: @"correct"];
  }
  if (__claimed_isset)
  {
    [encoder encodeInt32: __claimed forKey: @"claimed"];
  }
  if (__unclaimed_isset)
  {
    [encoder encodeInt32: __unclaimed forKey: @"unclaimed"];
  }
  if (__fixDate_isset)
  {
    [encoder encodeInt64: __fixDate forKey: @"fixDate"];
  }
}

- (void) dealloc
{
  [__listingID release_stub];
  [__locationID release_stub];
  [__locationName release_stub];
  [__sourceListings release_stub];
  [super dealloc_stub];
}

- (NSString *) listingID {
  return [[__listingID retain_stub] autorelease_stub];
}

- (void) setListingID: (NSString *) listingID {
  [listingID retain_stub];
  [__listingID release_stub];
  __listingID = listingID;
  __listingID_isset = YES;
}

- (BOOL) listingIDIsSet {
  return __listingID_isset;
}

- (void) unsetListingID {
  [__listingID release_stub];
  __listingID = nil;
  __listingID_isset = NO;
}

- (NSString *) locationID {
  return [[__locationID retain_stub] autorelease_stub];
}

- (void) setLocationID: (NSString *) locationID {
  [locationID retain_stub];
  [__locationID release_stub];
  __locationID = locationID;
  __locationID_isset = YES;
}

- (BOOL) locationIDIsSet {
  return __locationID_isset;
}

- (void) unsetLocationID {
  [__locationID release_stub];
  __locationID = nil;
  __locationID_isset = NO;
}

- (NSString *) locationName {
  return [[__locationName retain_stub] autorelease_stub];
}

- (void) setLocationName: (NSString *) locationName {
  [locationName retain_stub];
  [__locationName release_stub];
  __locationName = locationName;
  __locationName_isset = YES;
}

- (BOOL) locationNameIsSet {
  return __locationName_isset;
}

- (void) unsetLocationName {
  [__locationName release_stub];
  __locationName = nil;
  __locationName_isset = NO;
}

- (NSMutableArray *) sourceListings {
  return [[__sourceListings retain_stub] autorelease_stub];
}

- (void) setSourceListings: (NSMutableArray *) sourceListings {
  [sourceListings retain_stub];
  [__sourceListings release_stub];
  __sourceListings = sourceListings;
  __sourceListings_isset = YES;
}

- (BOOL) sourceListingsIsSet {
  return __sourceListings_isset;
}

- (void) unsetSourceListings {
  [__sourceListings release_stub];
  __sourceListings = nil;
  __sourceListings_isset = NO;
}

- (double) score {
  return __score;
}

- (void) setScore: (double) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (int32_t) expected {
  return __expected;
}

- (void) setExpected: (int32_t) expected {
  __expected = expected;
  __expected_isset = YES;
}

- (BOOL) expectedIsSet {
  return __expected_isset;
}

- (void) unsetExpected {
  __expected_isset = NO;
}

- (int32_t) missing {
  return __missing;
}

- (void) setMissing: (int32_t) missing {
  __missing = missing;
  __missing_isset = YES;
}

- (BOOL) missingIsSet {
  return __missing_isset;
}

- (void) unsetMissing {
  __missing_isset = NO;
}

- (int32_t) duplicate {
  return __duplicate;
}

- (void) setDuplicate: (int32_t) duplicate {
  __duplicate = duplicate;
  __duplicate_isset = YES;
}

- (BOOL) duplicateIsSet {
  return __duplicate_isset;
}

- (void) unsetDuplicate {
  __duplicate_isset = NO;
}

- (int32_t) incorrect {
  return __incorrect;
}

- (void) setIncorrect: (int32_t) incorrect {
  __incorrect = incorrect;
  __incorrect_isset = YES;
}

- (BOOL) incorrectIsSet {
  return __incorrect_isset;
}

- (void) unsetIncorrect {
  __incorrect_isset = NO;
}

- (int32_t) correct {
  return __correct;
}

- (void) setCorrect: (int32_t) correct {
  __correct = correct;
  __correct_isset = YES;
}

- (BOOL) correctIsSet {
  return __correct_isset;
}

- (void) unsetCorrect {
  __correct_isset = NO;
}

- (int32_t) claimed {
  return __claimed;
}

- (void) setClaimed: (int32_t) claimed {
  __claimed = claimed;
  __claimed_isset = YES;
}

- (BOOL) claimedIsSet {
  return __claimed_isset;
}

- (void) unsetClaimed {
  __claimed_isset = NO;
}

- (int32_t) unclaimed {
  return __unclaimed;
}

- (void) setUnclaimed: (int32_t) unclaimed {
  __unclaimed = unclaimed;
  __unclaimed_isset = YES;
}

- (BOOL) unclaimedIsSet {
  return __unclaimed_isset;
}

- (void) unsetUnclaimed {
  __unclaimed_isset = NO;
}

- (int64_t) fixDate {
  return __fixDate;
}

- (void) setFixDate: (int64_t) fixDate {
  __fixDate = fixDate;
  __fixDate_isset = YES;
}

- (BOOL) fixDateIsSet {
  return __fixDate_isset;
}

- (void) unsetFixDate {
  __fixDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setListingID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            SourceListing *_elem27 = [[SourceListing alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setSourceListings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setExpected: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMissing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDuplicate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIncorrect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCorrect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setClaimed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnclaimed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFixDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LocationListing"];
  if (__listingID_isset) {
    if (__listingID != nil) {
      [outProtocol writeFieldBeginWithName: @"listingID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __listingID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationID_isset) {
    if (__locationID != nil) {
      [outProtocol writeFieldBeginWithName: @"locationID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __locationID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationName_isset) {
    if (__locationName != nil) {
      [outProtocol writeFieldBeginWithName: @"locationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __locationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceListings_isset) {
    if (__sourceListings != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceListings" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__sourceListings count]];
        int i29;
        for (i29 = 0; i29 < [__sourceListings count]; i29++)
        {
          [[__sourceListings objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __score];
    [outProtocol writeFieldEnd];
  }
  if (__expected_isset) {
    [outProtocol writeFieldBeginWithName: @"expected" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __expected];
    [outProtocol writeFieldEnd];
  }
  if (__missing_isset) {
    [outProtocol writeFieldBeginWithName: @"missing" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __missing];
    [outProtocol writeFieldEnd];
  }
  if (__duplicate_isset) {
    [outProtocol writeFieldBeginWithName: @"duplicate" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __duplicate];
    [outProtocol writeFieldEnd];
  }
  if (__incorrect_isset) {
    [outProtocol writeFieldBeginWithName: @"incorrect" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __incorrect];
    [outProtocol writeFieldEnd];
  }
  if (__correct_isset) {
    [outProtocol writeFieldBeginWithName: @"correct" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __correct];
    [outProtocol writeFieldEnd];
  }
  if (__claimed_isset) {
    [outProtocol writeFieldBeginWithName: @"claimed" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __claimed];
    [outProtocol writeFieldEnd];
  }
  if (__unclaimed_isset) {
    [outProtocol writeFieldBeginWithName: @"unclaimed" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __unclaimed];
    [outProtocol writeFieldEnd];
  }
  if (__fixDate_isset) {
    [outProtocol writeFieldBeginWithName: @"fixDate" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __fixDate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LocationListing("];
  [ms appendString: @"listingID:"];
  [ms appendFormat: @"\"%@\"", __listingID];
  [ms appendString: @",locationID:"];
  [ms appendFormat: @"\"%@\"", __locationID];
  [ms appendString: @",locationName:"];
  [ms appendFormat: @"\"%@\"", __locationName];
  [ms appendString: @",sourceListings:"];
  [ms appendFormat: @"%@", __sourceListings];
  [ms appendString: @",score:"];
  [ms appendFormat: @"%f", __score];
  [ms appendString: @",expected:"];
  [ms appendFormat: @"%i", __expected];
  [ms appendString: @",missing:"];
  [ms appendFormat: @"%i", __missing];
  [ms appendString: @",duplicate:"];
  [ms appendFormat: @"%i", __duplicate];
  [ms appendString: @",incorrect:"];
  [ms appendFormat: @"%i", __incorrect];
  [ms appendString: @",correct:"];
  [ms appendFormat: @"%i", __correct];
  [ms appendString: @",claimed:"];
  [ms appendFormat: @"%i", __claimed];
  [ms appendString: @",unclaimed:"];
  [ms appendFormat: @"%i", __unclaimed];
  [ms appendString: @",fixDate:"];
  [ms appendFormat: @"%qi", __fixDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation MobileListingConstants
+ (void) initialize {
}
@end

