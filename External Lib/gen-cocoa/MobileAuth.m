/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "MobileCommon.h"

#import "MobileAuth.h"

@implementation LoginResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response userDetails: (User *) userDetails userConfig: (UserConfig *) userConfig sessionId: (NSString *) sessionId
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __userDetails = [userDetails retain_stub];
  __userDetails_isset = YES;
  __userConfig = [userConfig retain_stub];
  __userConfig_isset = YES;
  __sessionId = [sessionId retain_stub];
  __sessionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"userDetails"])
  {
    __userDetails = [[decoder decodeObjectForKey: @"userDetails"] retain_stub];
    __userDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"userConfig"])
  {
    __userConfig = [[decoder decodeObjectForKey: @"userConfig"] retain_stub];
    __userConfig_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain_stub];
    __sessionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__userDetails_isset)
  {
    [encoder encodeObject: __userDetails forKey: @"userDetails"];
  }
  if (__userConfig_isset)
  {
    [encoder encodeObject: __userConfig forKey: @"userConfig"];
  }
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__userDetails release_stub];
  [__userConfig release_stub];
  [__sessionId release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (User *) userDetails {
  return [[__userDetails retain_stub] autorelease_stub];
}

- (void) setUserDetails: (User *) userDetails {
  [userDetails retain_stub];
  [__userDetails release_stub];
  __userDetails = userDetails;
  __userDetails_isset = YES;
}

- (BOOL) userDetailsIsSet {
  return __userDetails_isset;
}

- (void) unsetUserDetails {
  [__userDetails release_stub];
  __userDetails = nil;
  __userDetails_isset = NO;
}

- (UserConfig *) userConfig {
  return [[__userConfig retain_stub] autorelease_stub];
}

- (void) setUserConfig: (UserConfig *) userConfig {
  [userConfig retain_stub];
  [__userConfig release_stub];
  __userConfig = userConfig;
  __userConfig_isset = YES;
}

- (BOOL) userConfigIsSet {
  return __userConfig_isset;
}

- (void) unsetUserConfig {
  [__userConfig release_stub];
  __userConfig = nil;
  __userConfig_isset = NO;
}

- (NSString *) sessionId {
  return [[__sessionId retain_stub] autorelease_stub];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain_stub];
  [__sessionId release_stub];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release_stub];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setUserDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          UserConfig *fieldValue = [[UserConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setUserConfig: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userDetails_isset) {
    if (__userDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"userDetails" type: TType_STRUCT fieldID: 2];
      [__userDetails write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userConfig_isset) {
    if (__userConfig != nil) {
      [outProtocol writeFieldBeginWithName: @"userConfig" type: TType_STRUCT fieldID: 3];
      [__userConfig write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",userDetails:"];
  [ms appendFormat: @"%@", __userDetails];
  [ms appendString: @",userConfig:"];
  [ms appendFormat: @"%@", __userConfig];
  [ms appendString: @",sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int32_t ERROR_SVC = 2002;
static int32_t ERROR_AUTHENTICATION_FAILED = 2101;
static int32_t ERROR_VALIDATION_EMAIL = 2102;
static int32_t ERROR_VALIDATION_PASSWORD = 2103;
static int32_t ERROR_VALIDATION_USERID = 2104;
static int32_t ERROR_VALIDATION_TENANTID = 2105;
static int32_t ERROR_VALIDATION_USERKEY = 2106;
static int32_t ERROR_TENANT_INACTIVE = 2107;
static int32_t ERROR_USER_INACTIVE = 2108;

@implementation MobileAuthConstants
+ (void) initialize {
}
+ (int32_t) ERROR_SVC{
  return ERROR_SVC;
}
+ (int32_t) ERROR_AUTHENTICATION_FAILED{
  return ERROR_AUTHENTICATION_FAILED;
}
+ (int32_t) ERROR_VALIDATION_EMAIL{
  return ERROR_VALIDATION_EMAIL;
}
+ (int32_t) ERROR_VALIDATION_PASSWORD{
  return ERROR_VALIDATION_PASSWORD;
}
+ (int32_t) ERROR_VALIDATION_USERID{
  return ERROR_VALIDATION_USERID;
}
+ (int32_t) ERROR_VALIDATION_TENANTID{
  return ERROR_VALIDATION_TENANTID;
}
+ (int32_t) ERROR_VALIDATION_USERKEY{
  return ERROR_VALIDATION_USERKEY;
}
+ (int32_t) ERROR_TENANT_INACTIVE{
  return ERROR_TENANT_INACTIVE;
}
+ (int32_t) ERROR_USER_INACTIVE{
  return ERROR_USER_INACTIVE;
}
@end

@interface login_args : NSObject <TBase, NSCoding> {
  NSString * __email;
  NSString * __password;

  BOOL __email_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (NSString *) password
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  LoginResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResponse *) success;
- (void) setSuccess: (LoginResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResponse *fieldValue = [[LoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface refresh_args : NSObject <TBase, NSCoding> {
  NSString * __email;
  int32_t __userId;
  int64_t __tenantId;
  NSString * __userKey;

  BOOL __email_isset;
  BOOL __userId_isset;
  BOOL __tenantId_isset;
  BOOL __userKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, getter=userId, setter=setUserId:) int32_t userId;
@property (nonatomic, getter=tenantId, setter=setTenantId:) int64_t tenantId;
@property (nonatomic, retain, getter=userKey, setter=setUserKey:) NSString * userKey;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email userId: (int32_t) userId tenantId: (int64_t) tenantId userKey: (NSString *) userKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (int32_t) userId;
- (void) setUserId: (int32_t) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) tenantId;
- (void) setTenantId: (int64_t) tenantId;
#endif
- (BOOL) tenantIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userKey;
- (void) setUserKey: (NSString *) userKey;
#endif
- (BOOL) userKeyIsSet;

@end

@implementation refresh_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email userId: (int32_t) userId tenantId: (int64_t) tenantId userKey: (NSString *) userKey
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __userId = userId;
  __userId_isset = YES;
  __tenantId = tenantId;
  __tenantId_isset = YES;
  __userKey = [userKey retain_stub];
  __userKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantId"])
  {
    __tenantId = [decoder decodeInt64ForKey: @"tenantId"];
    __tenantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userKey"])
  {
    __userKey = [[decoder decodeObjectForKey: @"userKey"] retain_stub];
    __userKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__tenantId_isset)
  {
    [encoder encodeInt64: __tenantId forKey: @"tenantId"];
  }
  if (__userKey_isset)
  {
    [encoder encodeObject: __userKey forKey: @"userKey"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__userKey release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (int64_t) tenantId {
  return __tenantId;
}

- (void) setTenantId: (int64_t) tenantId {
  __tenantId = tenantId;
  __tenantId_isset = YES;
}

- (BOOL) tenantIdIsSet {
  return __tenantId_isset;
}

- (void) unsetTenantId {
  __tenantId_isset = NO;
}

- (NSString *) userKey {
  return [[__userKey retain_stub] autorelease_stub];
}

- (void) setUserKey: (NSString *) userKey {
  [userKey retain_stub];
  [__userKey release_stub];
  __userKey = userKey;
  __userKey_isset = YES;
}

- (BOOL) userKeyIsSet {
  return __userKey_isset;
}

- (void) unsetUserKey {
  [__userKey release_stub];
  __userKey = nil;
  __userKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTenantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"refresh_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__tenantId_isset) {
    [outProtocol writeFieldBeginWithName: @"tenantId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __tenantId];
    [outProtocol writeFieldEnd];
  }
  if (__userKey_isset) {
    if (__userKey != nil) {
      [outProtocol writeFieldBeginWithName: @"userKey" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"refresh_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",tenantId:"];
  [ms appendFormat: @"%qi", __tenantId];
  [ms appendString: @",userKey:"];
  [ms appendFormat: @"\"%@\"", __userKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Refresh_result : NSObject <TBase, NSCoding> {
  LoginResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResponse *) success;
- (void) setSuccess: (LoginResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Refresh_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResponse *fieldValue = [[LoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Refresh_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Refresh_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MobileAuthClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_login: (NSString *) email password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginResponse *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginResponse *) login: (NSString *) email password: (NSString *) password
{
  [self send_login : email password: password];
  return [self recv_login];
}

- (void) send_refresh: (NSString *) email userId: (int32_t) userId tenantId: (int64_t) tenantId userKey: (NSString *) userKey
{
  [outProtocol writeMessageBeginWithName: @"refresh" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"refresh_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: userId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"tenantId" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: tenantId];
  [outProtocol writeFieldEnd];
  if (userKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"userKey" type: TType_STRING fieldID: 4];
    [outProtocol writeString: userKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginResponse *) recv_refresh
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Refresh_result * result = [[[Refresh_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"refresh failed: unknown result"];
}

- (LoginResponse *) refresh: (NSString *) email userId: (int32_t) userId tenantId: (int64_t) tenantId userKey: (NSString *) userKey
{
  [self send_refresh : email userId: userId tenantId: tenantId userKey: userKey];
  return [self recv_refresh];
}

@end

@implementation MobileAuthProcessor

- (id) initWithMobileAuth: (id <MobileAuth>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_refresh_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"refresh"];
  }
  return self;
}

- (id<MobileAuth>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args email] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_refresh_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  refresh_args * args = [[refresh_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Refresh_result * result = [[Refresh_result alloc] init];
  [result setSuccess: [mService refresh: [args email] userId: [args userId] tenantId: [args tenantId] userKey: [args userKey]]];
  [outProtocol writeMessageBeginWithName: @"refresh"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

